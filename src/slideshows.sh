#!/bin/bash
# version="1.0.0"
#
# ARG_OPTIONAL_BOOLEAN([top-left],[0],[Show a slideshow in the top-left quadrant of the screen.])
# ARG_OPTIONAL_BOOLEAN([top-right],[1],[Show a slideshow in the top-right quadrant of the screen.])
# ARG_OPTIONAL_BOOLEAN([bottom-left],[2],[Show a slideshow in the bottom-left quadrant of the screen.])
# ARG_OPTIONAL_BOOLEAN([bottom-right],[3],[Show a slideshow in the bottom-right quadrant of the screen.])
# ARG_OPTIONAL_BOOLEAN([all],[a],[Show a slideshow in all four quadrants of the screen.])
# ARG_HELP([Show multiple slideshows at once.])
# ARG_VERSION_AUTO([1.0.0])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='0123ahv'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_top_left="off"
_arg_top_right="off"
_arg_bottom_left="off"
_arg_bottom_right="off"
_arg_all="off"


print_help()
{
	printf '%s\n' "Show multiple slideshows at once."
	printf 'Usage: %s [-0|--(no-)top-left] [-1|--(no-)top-right] [-2|--(no-)bottom-left] [-3|--(no-)bottom-right] [-a|--(no-)all] [-h|--help] [-v|--version]\n' "$0"
	printf '\t%s\n' "-0, --top-left, --no-top-left: Show a slideshow in the top-left quadrant of the screen. (off by default)"
	printf '\t%s\n' "-1, --top-right, --no-top-right: Show a slideshow in the top-right quadrant of the screen. (off by default)"
	printf '\t%s\n' "-2, --bottom-left, --no-bottom-left: Show a slideshow in the bottom-left quadrant of the screen. (off by default)"
	printf '\t%s\n' "-3, --bottom-right, --no-bottom-right: Show a slideshow in the bottom-right quadrant of the screen. (off by default)"
	printf '\t%s\n' "-a, --all, --no-all: Show a slideshow in all four quadrants of the screen. (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\t%s\n' "-v, --version: Prints version"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-0|--no-top-left|--top-left)
				_arg_top_left="on"
				test "${1:0:5}" = "--no-" && _arg_top_left="off"
				;;
			-0*)
				_arg_top_left="on"
				_next="${_key##-0}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-0" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-1|--no-top-right|--top-right)
				_arg_top_right="on"
				test "${1:0:5}" = "--no-" && _arg_top_right="off"
				;;
			-1*)
				_arg_top_right="on"
				_next="${_key##-1}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-1" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-2|--no-bottom-left|--bottom-left)
				_arg_bottom_left="on"
				test "${1:0:5}" = "--no-" && _arg_bottom_left="off"
				;;
			-2*)
				_arg_bottom_left="on"
				_next="${_key##-2}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-2" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-3|--no-bottom-right|--bottom-right)
				_arg_bottom_right="on"
				test "${1:0:5}" = "--no-" && _arg_bottom_right="off"
				;;
			-3*)
				_arg_bottom_right="on"
				_next="${_key##-3}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-3" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-a|--no-all|--all)
				_arg_all="on"
				test "${1:0:5}" = "--no-" && _arg_all="off"
				;;
			-a*)
				_arg_all="on"
				_next="${_key##-a}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-a" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			-v|--version)
				printf '%s %s\n\n%s\n' "" "1.0.0" 'Show multiple slideshows at once.'
				exit 0
				;;
			-v*)
				printf '%s %s\n\n%s\n' "" "1.0.0" 'Show multiple slideshows at once.'
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# echo "top-left:     $_arg_top_left"
# echo "top-right:    $_arg_top_right"
# echo "bottom-left:  $_arg_bottom_left"
# echo "bottom-right: $_arg_bottom_right"

secondsToWaitBetweenEach=3
secondsToWaitAtEnd=5
quadrantValues=( "${_arg_top_left}" "${_arg_top_right}" "${_arg_bottom_left}" "${_arg_bottom_right}" )
quadrantNames=( "top-left" "top-right" "bottom-left" "bottom-right" )
quadrantArgs=( "00" "10" "01" "11" )


handle_arg_all()
{
	if [[ "${_arg_all}" = on ]]; then
		for (( i = 0; i < 4; i++ )); do
			quadrantValues[i]=on
		done
	fi
}


show_slideshow_count()
{
	slideshowCount=0

	for (( i = 0; i < 4; i++ )); do
		if [[ "${quadrantValues[$i]}" = on ]]; then
			((++slideshowCount))
		fi
	done

	if [[ $slideshowCount -le 0 ]]; then
		print_help
		exit 0
	elif [[ $slideshowCount -eq 1 ]]; then
		pluralSuffix=
	else
		pluralSuffix="s"
	fi

	echo "Starting $slideshowCount slideshow$pluralSuffix."
}


start_slideshows()
{
	for (( i = 0; i < 4; i++ )); do
		if [[ "${quadrantValues[$i]}" = on ]]; then
			echo "Starting ${quadrantNames[$i]}."
			(./bin/IrfanViewPortable/slideshow.bat "${quadrantArgs[$i]}" > /dev/null) & sleep ${secondsToWaitBetweenEach}
		fi
	done
}


wait_at_end()
{
	echo "Waiting ${secondsToWaitAtEnd} seconds . . ."

	sleep ${secondsToWaitAtEnd}
}


handle_arg_all
show_slideshow_count
start_slideshows
# wait_at_end
echo "Done."
exit 0


# ] <-- needed because of Argbash
